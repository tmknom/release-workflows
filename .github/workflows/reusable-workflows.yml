name: Release Reusable Workflows
on:
  workflow_call:
    inputs:
      level:
        type: string
        required: true
        description: Bump up to [patch / minor / major]

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Git Config
        run: |
          set -x
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: bump
        env:
          BUMP_LEVEL: ${{ inputs.level }}
          INITIAL_VERSION: v0.0.0
        run: |
          set -x
          git fetch --tag
          current="$(git tag --sort=-v:refname | head -1)"
          if [[ "${current}" == "" ]]; then
            current="${INITIAL_VERSION}"
          fi

          IFS='.' read -ra versions <<<"${current#v}"
          major="${versions[0]}"
          minor="${versions[1]}"
          patch="${versions[2]}"

          case "${BUMP_LEVEL}" in
            major)
              major="$((major + 1))"
              minor=0
              patch=0
              ;;
            minor)
              minor="$((minor + 1))"
              patch=0
              ;;
            patch)
              patch="$((patch + 1))"
              ;;
            *)
              printf "invalid argument: %s" "${BUMP_LEVEL}" >&2
              exit 1
              ;;
          esac

          {
            echo "version=v${major}.${minor}.${patch}"
            echo "previous-version=${current}"
            echo "initial-version=${INITIAL_VERSION}"
          } >> "${GITHUB_OUTPUT}"

      - name: Push version tag
        env:
          VERSION: ${{ steps.bump.outputs.version }}
        run: |
          set -x
          major="${VERSION%%.*}"
          git tag --force --message "${VERSION}" "${VERSION}"
          git tag --force --message "${VERSION}" "${major}"
          git push --force origin "${VERSION}"
          git push --force origin "${major}"

      - name: Generate unique identifier
        id: unique
        run: |
          set -x
          identifier="${GITHUB_JOB}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${GITHUB_WORKFLOW_SHA}"
          echo "identifier=${identifier}" >> "${GITHUB_OUTPUT}"

      - name: Generate configuration
        id: config
        env:
          DEFAULT_CONFIG_PATH: .github/release.yml
        run: |
          set -x
          config_path="${DEFAULT_CONFIG_PATH}"
          cat <<EOF >"${config_path}"
          changelog:
            categories:
              - title: Exciting New Features ðŸŽ‰
                labels:
                  - enhancement
              - title: Bug Fixes ðŸ› 
                labels:
                  - bug
              - title: Bump Dependencies ðŸ”¥
                labels:
                  - dependencies
          EOF
          echo "path=${config_path}" >> "${GITHUB_OUTPUT}"

      - name: Push temporary branch
        id: temporary
        env:
          IDENTIFIER: ${{ steps.unique.outputs.identifier }}
          CONFIG_PATH: ${{ steps.config.outputs.path }}
        run: |
          set -x
          branch="temporary/${IDENTIFIER}"
          title="Please delete this branch"
          message="This commit is generated by ${GITHUB_WORKFLOW} / ${IDENTIFIER}"
          log="See: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          git switch -c "${branch}"
          git add "${CONFIG_PATH}"
          git commit -m "${title}" -m "${message}" -m "${log}"
          git push origin "${branch}"

          echo "branch=${branch}" >> "${GITHUB_OUTPUT}"
          echo "commit-sha=$(git log -1 --pretty=%H)" >> "${GITHUB_OUTPUT}"

      - name: Generate release note
        id: note
        env:
          VERSION: ${{ steps.bump.outputs.version }}
          PREVIOUS_VERSION: ${{ steps.bump.outputs.previous-version }}
          INITIAL_VERSION: ${{ steps.bump.outputs.initial-version }}
          COMMIT_SHA: ${{ steps.temporary.outputs.commit-sha }}
          IDENTIFIER: ${{ steps.unique.outputs.identifier }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          previous_tag_name_option=()
          if [[ "${PREVIOUS_VERSION}" != "${INITIAL_VERSION}" ]]; then
            previous_tag_name_option=(-f previous_tag_name="${PREVIOUS_VERSION}")
          fi

          release_note_path="${RUNNER_TEMP}/release-${IDENTIFIER}.md"
          gh api "/repos/${GITHUB_REPOSITORY}/releases/generate-notes" \
            -f target_commitish="${COMMIT_SHA}" \
            -f tag_name="${VERSION}" \
            "${previous_tag_name_option[@]}" \
            --jq .body > "${release_note_path}"
          echo "path=${release_note_path}" >> "${GITHUB_OUTPUT}"

      - name: Show release note
        env:
          NOTE_PATH: ${{ steps.note.outputs.path }}
        run: |
          set -x
          cat "${NOTE_PATH}"

      - name: Release
        env:
          VERSION: ${{ steps.bump.outputs.version }}
          NOTE_PATH: ${{ steps.note.outputs.path }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          gh release create "${VERSION}" --title "${VERSION}" --notes-file "${NOTE_PATH}"

      - name: Delete temporary branch
        if: ${{ always() && steps.temporary.outputs.branch != '' }}
        env:
          TEMPORARY_BRANCH: ${{ steps.temporary.outputs.branch }}
        run: |
          set -x
          git push origin "${TEMPORARY_BRANCH}" --delete || true
